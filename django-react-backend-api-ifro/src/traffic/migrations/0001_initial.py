# Generated by Django 5.2.5 on 2025-08-30 03:52

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Intersection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PolicyProposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='제목')),
                ('description', models.TextField(verbose_name='내용')),
                ('category', models.CharField(choices=[('traffic_signal', '신호등 관련'), ('road_safety', '도로 안전'), ('traffic_flow', '교통 흐름'), ('infrastructure', '인프라 개선'), ('policy', '교통 정책'), ('other', '기타')], max_length=20, verbose_name='카테고리')),
                ('priority', models.CharField(choices=[('low', '낮음'), ('medium', '보통'), ('high', '높음'), ('urgent', '긴급')], default='medium', max_length=10, verbose_name='우선순위')),
                ('status', models.CharField(choices=[('pending', '대기 중'), ('under_review', '검토 중'), ('in_progress', '진행 중'), ('completed', '완료'), ('rejected', '반려')], default='pending', max_length=15, verbose_name='상태')),
                ('location', models.CharField(blank=True, max_length=500, verbose_name='위치 설명')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='위도')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='경도')),
                ('admin_response', models.TextField(blank=True, verbose_name='관리자 답변')),
                ('admin_response_date', models.DateTimeField(blank=True, null=True, verbose_name='답변일')),
                ('votes_count', models.IntegerField(default=0, verbose_name='투표수')),
                ('views_count', models.IntegerField(default=0, verbose_name='조회수')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='작성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('admin_response_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_responses', to=settings.AUTH_USER_MODEL, verbose_name='답변자')),
                ('intersection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='proposals', to='traffic.intersection', verbose_name='관련 교차로')),
                ('submitted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submitted_proposals', to=settings.AUTH_USER_MODEL, verbose_name='제안자')),
            ],
            options={
                'verbose_name': '정책제안',
                'verbose_name_plural': '정책제안들',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProposalAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='proposal_attachments/%Y/%m/%d/', verbose_name='파일')),
                ('file_name', models.CharField(max_length=255, verbose_name='파일명')),
                ('file_size', models.PositiveIntegerField(verbose_name='파일 크기')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='업로드일')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='traffic.policyproposal', verbose_name='정책제안')),
            ],
            options={
                'verbose_name': '정책제안 첨부파일',
                'verbose_name_plural': '정책제안 첨부파일들',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='ProposalTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='태그명')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('proposals', models.ManyToManyField(related_name='tags', to='traffic.policyproposal', verbose_name='정책제안들')),
            ],
            options={
                'verbose_name': '정책제안 태그',
                'verbose_name_plural': '정책제안 태그들',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProposalViewLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP 주소')),
                ('viewed_at', models.DateTimeField(auto_now_add=True, verbose_name='조회일')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='view_logs', to='traffic.policyproposal', verbose_name='정책제안')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '정책제안 조회 로그',
                'verbose_name_plural': '정책제안 조회 로그들',
            },
        ),
        migrations.CreateModel(
            name='ProposalVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_type', models.CharField(choices=[('up', '추천'), ('down', '비추천')], max_length=4, verbose_name='투표 타입')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='투표일')),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='traffic.policyproposal', verbose_name='정책제안')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='투표자')),
            ],
            options={
                'verbose_name': '정책제안 투표',
                'verbose_name_plural': '정책제안 투표들',
            },
        ),
        migrations.CreateModel(
            name='S_Incident',
            fields=[
                ('incident_id', models.AutoField(primary_key=True, serialize=False)),
                ('incident_type', models.CharField(default='', max_length=100, verbose_name='Incident Type')),
                ('intersection_name', models.CharField(default='', max_length=200, verbose_name='Intersection Name')),
                ('district', models.CharField(default='', max_length=100, verbose_name='District')),
                ('managed_by', models.CharField(default='', max_length=100, verbose_name='Managed By')),
                ('assigned_to', models.CharField(default='', max_length=100, verbose_name='Assigned To')),
                ('registered_at', models.DateTimeField(auto_now_add=True, verbose_name='Registered At')),
                ('status', models.CharField(default='OPEN', max_length=50, verbose_name='Status')),
                ('user', models.CharField(default='', max_length=100, verbose_name='User')),
                ('equipment_locked', models.CharField(choices=[('S', 'Yes'), ('N', 'No')], default='N', max_length=1, verbose_name='Equipment Locked')),
                ('last_status_update', models.DateTimeField(auto_now=True, verbose_name='Last Status Update')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('sii_id', models.IntegerField(blank=True, null=True, verbose_name='SII ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('type', models.CharField(default='', max_length=100, verbose_name='Type')),
                ('intersection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='s_incidents', to='traffic.intersection', verbose_name='Linked Intersection')),
            ],
            options={
                'verbose_name': 'Secure Incident',
                'verbose_name_plural': 'Secure Incidents',
                'db_table': 'S_incident',
                'ordering': ['-registered_at'],
            },
        ),
        migrations.CreateModel(
            name='S_TotalTrafficVolume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('total_volume', models.IntegerField()),
                ('average_speed', models.FloatField()),
                ('intersection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='s_total_traffic_volumes', to='traffic.intersection')),
            ],
            options={
                'db_table': 'S_total_traffic_volume',
            },
        ),
        migrations.CreateModel(
            name='S_TrafficInterpretation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('interpretation_text', models.TextField()),
                ('congestion_level', models.CharField(choices=[('low', 'Low'), ('moderate', 'Moderate'), ('high', 'High'), ('very_high', 'Very High')], max_length=20)),
                ('peak_direction', models.CharField(choices=[('N', 'North'), ('S', 'South'), ('E', 'East'), ('W', 'West')], max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('intersection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='s_interpretations', to='traffic.intersection')),
            ],
            options={
                'db_table': 'S_traffic_interpretation',
                'ordering': ['-datetime'],
            },
        ),
        migrations.CreateModel(
            name='S_TrafficVolume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('direction', models.CharField(choices=[('N', 'North'), ('S', 'South'), ('E', 'East'), ('W', 'West')], max_length=1)),
                ('volume', models.IntegerField()),
                ('is_simulated', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('intersection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='s_traffic_volumes', to='traffic.intersection')),
            ],
            options={
                'db_table': 'S_traffic_volume',
                'ordering': ['-datetime'],
            },
        ),
        migrations.CreateModel(
            name='TotalTrafficVolume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('total_volume', models.IntegerField()),
                ('average_speed', models.FloatField()),
                ('intersection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='traffic.intersection')),
            ],
            options={
                'db_table': 'total_traffic_volume',
            },
        ),
        migrations.CreateModel(
            name='TrafficInterpretation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('interpretation_text', models.TextField()),
                ('congestion_level', models.CharField(choices=[('low', 'Low'), ('moderate', 'Moderate'), ('high', 'High'), ('very_high', 'Very High')], max_length=20)),
                ('peak_direction', models.CharField(choices=[('N', 'North'), ('S', 'South'), ('E', 'East'), ('W', 'West')], max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('intersection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interpretations', to='traffic.intersection')),
            ],
            options={
                'ordering': ['-datetime'],
            },
        ),
        migrations.CreateModel(
            name='TrafficVolume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField()),
                ('direction', models.CharField(choices=[('N', 'North'), ('S', 'South'), ('E', 'East'), ('W', 'West')], max_length=1)),
                ('volume', models.IntegerField()),
                ('is_simulated', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('intersection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='traffic_volumes', to='traffic.intersection')),
            ],
            options={
                'ordering': ['-datetime'],
            },
        ),
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('incident_id', models.AutoField(primary_key=True, serialize=False)),
                ('incident_type', models.CharField(default='', max_length=100, verbose_name='Incident Type')),
                ('intersection_name', models.CharField(default='', max_length=200, verbose_name='Intersection Name')),
                ('district', models.CharField(default='', max_length=100, verbose_name='District')),
                ('managed_by', models.CharField(default='', max_length=100, verbose_name='Managed By')),
                ('assigned_to', models.CharField(default='', max_length=100, verbose_name='Assigned To')),
                ('registered_at', models.DateTimeField(auto_now_add=True, verbose_name='Registered At')),
                ('status', models.CharField(default='OPEN', max_length=50, verbose_name='Status')),
                ('user', models.CharField(default='', max_length=100, verbose_name='User')),
                ('equipment_locked', models.CharField(choices=[('S', 'Yes'), ('N', 'No')], default='N', max_length=1, verbose_name='Equipment Locked')),
                ('last_status_update', models.DateTimeField(auto_now=True, verbose_name='Last Status Update')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('sii_id', models.IntegerField(blank=True, null=True, verbose_name='SII ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('type', models.CharField(default='', max_length=100, verbose_name='Type')),
                ('intersection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='traffic.intersection', verbose_name='Linked Intersection')),
            ],
            options={
                'verbose_name': 'Incident',
                'verbose_name_plural': 'Incidents',
                'ordering': ['-registered_at'],
                'indexes': [models.Index(fields=['incident_type'], name='traffic_inc_inciden_7cdb1e_idx'), models.Index(fields=['status'], name='traffic_inc_status_875367_idx'), models.Index(fields=['registered_at'], name='traffic_inc_registe_ea5b75_idx'), models.Index(fields=['district'], name='traffic_inc_distric_84da7e_idx'), models.Index(fields=['intersection'], name='traffic_inc_interse_ae5afd_idx')],
            },
        ),
        migrations.CreateModel(
            name='IntersectionFavoriteLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_favorite', models.BooleanField(verbose_name='즐겨찾기 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성 시간')),
                ('intersection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_logs', to='traffic.intersection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '교차로 즐겨찾기 로그',
                'verbose_name_plural': '교차로 즐겨찾기 로그들',
                'indexes': [models.Index(fields=['intersection', 'user', 'is_favorite'], name='traffic_int_interse_d77397_idx'), models.Index(fields=['user', 'is_favorite'], name='traffic_int_user_id_672cbd_idx'), models.Index(fields=['created_at'], name='traffic_int_created_71b3a0_idx')],
            },
        ),
        migrations.CreateModel(
            name='IntersectionStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='조회수')),
                ('favorite_count', models.PositiveIntegerField(default=0, verbose_name='즐겨찾기 수')),
                ('ai_report_count', models.PositiveIntegerField(default=0, verbose_name='AI 리포트 요청 수')),
                ('last_viewed', models.DateTimeField(blank=True, null=True, verbose_name='마지막 조회 시간')),
                ('last_ai_report', models.DateTimeField(blank=True, null=True, verbose_name='마지막 AI 리포트 요청 시간')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('intersection', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='traffic.intersection')),
            ],
            options={
                'verbose_name': '교차로 통계',
                'verbose_name_plural': '교차로 통계들',
                'indexes': [models.Index(fields=['view_count'], name='traffic_int_view_co_49689e_idx'), models.Index(fields=['favorite_count'], name='traffic_int_favorit_8340eb_idx'), models.Index(fields=['last_viewed'], name='traffic_int_last_vi_201324_idx')],
            },
        ),
        migrations.CreateModel(
            name='IntersectionViewLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP 주소')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('viewed_at', models.DateTimeField(auto_now_add=True, verbose_name='조회 시간')),
                ('intersection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='view_logs', to='traffic.intersection')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '교차로 조회 로그',
                'verbose_name_plural': '교차로 조회 로그들',
                'indexes': [models.Index(fields=['intersection', 'viewed_at'], name='traffic_int_interse_752252_idx'), models.Index(fields=['user', 'viewed_at'], name='traffic_int_user_id_5eed84_idx'), models.Index(fields=['ip_address'], name='traffic_int_ip_addr_154cc7_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='policyproposal',
            index=models.Index(fields=['category'], name='traffic_pol_categor_2eb2eb_idx'),
        ),
        migrations.AddIndex(
            model_name='policyproposal',
            index=models.Index(fields=['status'], name='traffic_pol_status_320028_idx'),
        ),
        migrations.AddIndex(
            model_name='policyproposal',
            index=models.Index(fields=['priority'], name='traffic_pol_priorit_48b244_idx'),
        ),
        migrations.AddIndex(
            model_name='policyproposal',
            index=models.Index(fields=['intersection'], name='traffic_pol_interse_3e9558_idx'),
        ),
        migrations.AddIndex(
            model_name='policyproposal',
            index=models.Index(fields=['submitted_by'], name='traffic_pol_submitt_aa2056_idx'),
        ),
        migrations.AddIndex(
            model_name='policyproposal',
            index=models.Index(fields=['created_at'], name='traffic_pol_created_775212_idx'),
        ),
        migrations.AddIndex(
            model_name='proposalviewlog',
            index=models.Index(fields=['proposal', 'viewed_at'], name='traffic_pro_proposa_8b10b6_idx'),
        ),
        migrations.AddIndex(
            model_name='proposalviewlog',
            index=models.Index(fields=['user'], name='traffic_pro_user_id_06cd1e_idx'),
        ),
        migrations.AddIndex(
            model_name='proposalviewlog',
            index=models.Index(fields=['ip_address'], name='traffic_pro_ip_addr_1bc32e_idx'),
        ),
        migrations.AddIndex(
            model_name='proposalvote',
            index=models.Index(fields=['proposal', 'vote_type'], name='traffic_pro_proposa_2f37be_idx'),
        ),
        migrations.AddIndex(
            model_name='proposalvote',
            index=models.Index(fields=['user'], name='traffic_pro_user_id_03900f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='proposalvote',
            unique_together={('proposal', 'user')},
        ),
        migrations.AddIndex(
            model_name='s_incident',
            index=models.Index(fields=['incident_type'], name='S_incident_inciden_db5542_idx'),
        ),
        migrations.AddIndex(
            model_name='s_incident',
            index=models.Index(fields=['status'], name='S_incident_status_57d7e5_idx'),
        ),
        migrations.AddIndex(
            model_name='s_incident',
            index=models.Index(fields=['registered_at'], name='S_incident_registe_0067b8_idx'),
        ),
        migrations.AddIndex(
            model_name='s_incident',
            index=models.Index(fields=['district'], name='S_incident_distric_31c4ec_idx'),
        ),
        migrations.AddIndex(
            model_name='s_incident',
            index=models.Index(fields=['intersection'], name='S_incident_interse_8f0724_idx'),
        ),
        migrations.AddIndex(
            model_name='s_totaltrafficvolume',
            index=models.Index(fields=['intersection', 'datetime'], name='S_total_tra_interse_64206b_idx'),
        ),
        migrations.AddIndex(
            model_name='s_trafficinterpretation',
            index=models.Index(fields=['intersection', 'datetime'], name='S_traffic_i_interse_e57a82_idx'),
        ),
        migrations.AddIndex(
            model_name='s_trafficinterpretation',
            index=models.Index(fields=['congestion_level'], name='S_traffic_i_congest_c52f7e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='s_trafficinterpretation',
            unique_together={('intersection', 'datetime')},
        ),
        migrations.AddIndex(
            model_name='s_trafficvolume',
            index=models.Index(fields=['intersection', 'datetime'], name='S_traffic_v_interse_792653_idx'),
        ),
        migrations.AddIndex(
            model_name='s_trafficvolume',
            index=models.Index(fields=['direction'], name='S_traffic_v_directi_5f639d_idx'),
        ),
        migrations.AddIndex(
            model_name='totaltrafficvolume',
            index=models.Index(fields=['intersection', 'datetime'], name='total_traff_interse_875aef_idx'),
        ),
        migrations.AddIndex(
            model_name='trafficinterpretation',
            index=models.Index(fields=['intersection', 'datetime'], name='traffic_tra_interse_3f4b5f_idx'),
        ),
        migrations.AddIndex(
            model_name='trafficinterpretation',
            index=models.Index(fields=['congestion_level'], name='traffic_tra_congest_2b3bde_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='trafficinterpretation',
            unique_together={('intersection', 'datetime')},
        ),
        migrations.AddIndex(
            model_name='trafficvolume',
            index=models.Index(fields=['intersection', 'datetime'], name='traffic_tra_interse_34ed1d_idx'),
        ),
        migrations.AddIndex(
            model_name='trafficvolume',
            index=models.Index(fields=['direction'], name='traffic_tra_directi_cd0ba7_idx'),
        ),
    ]
